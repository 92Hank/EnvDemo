name: Write to json

on: 
  push:
    branches: [ "develop" ]

# env: 
#   REACT_APP_GIT_VERSION: ${{ secrets.REACT_APP_GIT_VERSION}}

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: env-demo

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          ref: ${{ github.head_ref }}
          fetch-depth: 0
        # with:
        #   ref: ${{ github.head_ref }}

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: env-demo/package-lock.json

      # - name: Git describe
      #   id: ghd
      #   uses: proudust/gh-describe@v1.5.4
      # - name: Check outputs
      #   run: |
      #     echo "describe: ${{ steps.ghd.outputs.describe }}"
      #     echo "tag     : ${{ steps.ghd.outputs.tag }}"
      #     echo "distance: ${{ steps.ghd.outputs.distance }}"
      #     echo "sha     : ${{ steps.ghd.outputs.sha }}"

      # - name: Set Git tag
      #   run: |
      #     echo "tag=${{ steps.ghd.outputs.tag }}" >> $GITHUB_ENV
      #     echo "build_date=$(date +'%Y-%m-%d-%H:%M')" >> $GITHUB_ENV
      #     echo "git_tag_date=$(git log -1 --format=%ai --date=short)" >> $GITHUB_ENV
      # - name: Check output
      #   run: |
      #     touch ${{ github.workspace }}/env-demo/src/.env
      #     echo ${{env.tag}} - ${{env.build_date}} - ${{env.git_tag_date}}
      #     echo "REACT_APP_GIT_VERSION=${{env.tag}}" >> $GITHUB_ENV

      - name: Set Git tag
        run: |
          echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "git_tag_date=$(git log -1 --format=%ai --date=local ${{env.tag}})" >> $GITHUB_ENV
      - name: Check output
        run: |
          touch ${{ github.workspace }}/env-demo/.env
          echo ${{env.tag}} - ${{env.git_tag_date}}
          echo "REACT_APP_GIT_VERSION=${{env.tag}}" >> $GITHUB_ENV
          echo "REACT_APP_TAG_VERSION=${{env.tag}}" >> ${{ github.workspace }}/env-demo/src/.env
          echo "REACT_APP_TAG_VERSION_DATE=${{env.git_tag_date}}" >> ${{ github.workspace }}/env-demo/src/.env
          echo "TEST_ENV_KEY=hej123" >> ${{ github.workspace }}/env-demo/src/.env
          cat ${{ github.workspace }}/env-demo/.env

      # - name: Make .env file
      #   uses: SpicyPizza/create-envfile@v1.3
      #   with:
      #     envkey_REACT_APP_TAG_VERSION: ${{env.tag}}
      #     envkey_ENV_REACT_APP_TAG_VERSION_DATE: ${{env.git_tag_date}}
      #     ANOTHER_KEY: 'Test123'
      #     directory: ${{ github.workspace }}/env-demo/src/.env
      #     file_name: .env
      #     fail_on_empty: false

      # - name: Create .env file
      #   uses: ozaytsev86/create-env-file@v1
      #   with:
      #     ENV_REACT_APP_TAG_VERSION: ${{env.tag}}
      #     ENV_REACT_APP_TAG_VERSION_DATE: ${{env.git_tag_date}}
      #     ENV_ANOTHER_KEY: 'Test123'
      
      - name: Run git script
        uses: actions/github-script@v6
        with:
          script: |
            const { default: printGitTag } = await import('${{ github.workspace }}/env-demo/src/gitTagInfo.js')
            const { default: printStuff } = await import('${{ github.workspace }}/env-demo/src/print-stuff.js')
            console.log('${{env.tag}}')
            await printGitTag('${{env.tag}}')
            await printStuff()
            console.log('stuff')

      - name: Install dependencies
        run: |
          npm ci
          npm run git-tag

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: env-demo-build
          path: env-demo/build/

      # - name: Check for modified files
      #   id: git-check
      #   run: echo "modified=::$(if [ -n "$(git status --porcelain)" ]; then 
      #     echo "true"; else echo "false"; fi)" >> $GITHUB_OUTPUT
      #   shell: bash

      # - name: Update changes in GitHub repository
      #   if: steps.git-check.outputs.modified == 'true'
      #   run:  |
      #     git config --local user.name 'Henke' 
      #     git config --local user.email 'henrik.g.kristensson@gmail.com'
      #     git add -A
      #     git commit -m '[automated commit] for git tags with GitHub workflow'
      #     git push

      # - name: Commit files
      #   id: commit
      #   run: |
      #     git config --local user.email "henrik.g.kristensson@gmail.com"
      #     git config --local user.name "92Hank"
      #     git add --all
      #     if [-n "$(git status --porcelain)"]; then
      #       echo "::set-output name=push::false"
      #       echo "push=false" >> $GITHUB_OUTPUT
      #     else
      #       git commit -m '[automated commit] for git tags with GitHub workflow' -a
      #       echo "::set-output name=push::true"
      #       echo "push=true" >> $GITHUB_OUTPUT
      #     fi

      - name: Check for modified files
        id: git-check
        run: echo "changed=$(git status --porcelain | wc -l)" >> $GITHUB_OUTPUT

      - name: Commit files
        if: steps.git-check.outputs.changed != 0
        run: |
          git config --local user.email "henrik.g.kristensson@gmail.com"
          git config --local user.name "92Hank"
          git add --all
          git commit -m '[automated commit] for git tags with GitHub workflow' -a

        shell: bash
      - name: Push changes
        if: steps.git-check.outputs.changed != 0
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
            
